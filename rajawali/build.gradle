import groovy.transform.CompileStatic

apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'signing'

@CompileStatic
String getVersionString() {
    String v = "rajawali-0.1" + "-SNAPSHOT"
    return v
}

group = "org.rajawali3d"     // 可以根据需要自定义 group
version = getVersionString()

// JaCoCo 测试报告任务（可选）
tasks.register("jacocoTestReport", JacocoReport) {
    dependsOn 'testDebugUnitTest'

    reports {
        // html.required.set(true) // 可以启用输出
        // xml.required.set(true)
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    //sourceDirectories.setFrom(files([mainSrc]))
    //classDirectories.setFrom(files([debugTree]))
    //executionData.setFrom(files(["${buildDir}/jacoco/testDebugUnitTest.exec"]))
}

android {
    // 添加 namespace，解决报错
    namespace 'org.rajawali3d'

    compileSdkVersion 36

    defaultConfig {
        minSdkVersion 33
        targetSdkVersion 36
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lint {
        abortOnError false
    }
}

dependencies {
    api 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
}

//apply from: '../maven_push.gradle' // 如果不上传 Maven，可注释
